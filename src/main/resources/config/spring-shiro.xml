<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">



    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--引入配置好的缓存bean-->
       <!-- <property name="cacheManager" ref="cacheManager"/>-->
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <!--设置session的状态-->
        <property name="sessionMode" value="native"/>
        <!--引入配置好的自定义的realm -->
        <property name="realm" ref="jdbcRealm"/>
    </bean>
 <!--  设置缓存 <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        &lt;!&ndash; Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> &ndash;&gt;
        &lt;!&ndash; If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.:
        <property name="cacheManagerConfigFile" value="classpath:some/path/to/ehcache.xml"/> &ndash;&gt;
    </bean>-->
    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
<!--    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        &lt;!&ndash; Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> &ndash;&gt;
        &lt;!&ndash; If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.:
        <property name="cacheManagerConfigFile" value="classpath:some/path/to/ehcache.xml"/> &ndash;&gt;
    </bean>-->

    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!--需要使用自定义的realm 来进行shiro 认证和授权-->



    <bean id="jdbcRealm" class="com.hqyj.www.realm.Myrealm">
        <property name="name" value="jdbcRealm"/>
        <!--设置加密方式-->
        <property name="credentialsMatcher">
            <!-- The 'bootstrapDataPopulator' Sha256 hashes the password
                 (using the username as the salt) then base64 encodes it: -->
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
              <!--  <property name="hashAlgorithmName" value="SHA-256"/>-->
                <!--加密方式-->
                <property name="hashAlgorithmName" value="MD5"/>
                <!-- true means hex encoded, false means base64 encoded -->
                <!--加密多少次-->
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>



    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!--配置生命方式-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
<!--    使shiro的注解生效-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated
         with a Subject for security checks. -->
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!--配置shiro过滤器以便被web.xml识别-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--在未被认证之前都会重定向到vaule里面的url去-->
        <property name="loginUrl" value="/login.jsp"/>
        <!--认证成功执行的url-->
        <property name="successUrl" value="/user/unauth.do"/>
        <!--无法认证的url执行url，即是没有全选的URL会重定向到下面的URL地址-->
        <property name="unauthorizedUrl" value="/error.jsp"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="aName" value-ref="someFilterPojo"/>
            </util:map>
        </property> -->
        <!--设置一些用户权限  访问方式...-->
        <!--
           anon:匿名访问（不用认证就可以正常访问的url）
           authc:认证之后才能正常访问url
           /** 拦截所有请求

        -->

        <property name="filterChainDefinitions">
            <value>
<!--                放行静态资源-->
                /js/* = anon
                /css/* = anon
                /fonts/* = anon
                /images/* = anon
                /layer/* = anon
                /lib/* = anon
                /resources/* = anon
                /view/* = anon

<!--                放行根目录-->
<!--            / = anon-->

<!--                放行指定目录-->
                /login/checkLogin.ajax = anon

<!--                请求退出认证-->
<!--                /user/logout.ajax = logout-->


                <!--                只有某些权限才能访问的URL-->
<!--                /jsp/cssWave2.jsp = roles[user]-->
<!--                /jsp/Elements.jsp = roles[admin]-->


<!--                所有目录需要认证才放行-->
                /** = authc
            </value>
        </property>
    </bean>

</beans>
